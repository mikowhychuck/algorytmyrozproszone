#serwer 
import zmq
import numpy as np
import pickle

constant_factor = 2.0

def handle_matrices(matrices_data):
    matrices = pickle.loads(matrices_data)
    print(f"Otrzymane dane: {matrices}")
    result_matrices = [constant_factor * matrix for matrix in matrices]
    result_data = pickle.dumps(result_matrices)
    return result_data

def main():
    context = zmq.Context()
    socket = context.socket(zmq.REP)
    socket.bind("tcp://*:5555")

    while True:
        matrices_data = socket.recv()
        result_data = handle_matrices(matrices_data)
        socket.send(result_data)

if __name__ == "__main__":
    main()

#klient
import zmq
import numpy as np
import pickle

def generate_matrices(num_matrices):
    matrices = []
    for i in range(num_matrices):
        matrix = np.random.randint(1, 11, size=(3, 3))
        matrices.append(matrix)
    return matrices

def main():
    context = zmq.Context()
    socket = context.socket(zmq.REQ)
    socket.connect("tcp://localhost:5555")

    matrices = generate_matrices(3)  
    matrices_data = pickle.dumps(matrices)
    socket.send(matrices_data)

    result_data = socket.recv()
    result_matrices = pickle.loads(result_data)
    print("Otrzymane wynikowe macierze:")
    for matrix in result_matrices:
        print(matrix)

if __name__ == "__main__":
    main()

/// wydruk
z serwera:
Otrzymane dane: 
[
array([[ 7,  5, 10],
       [ 4,  6,  5],
       [ 1,  1,  8]]), 
array([[ 5,  4,  6],
       [ 5, 10,  1],
       [ 7, 10,  7]]), 
array([[2, 3, 1],
       [3, 6, 6],
       [3, 5, 8]])]
z klienta:
Otrzymane wynikowe macierze:
[[14. 10. 20.]
 [ 8. 12. 10.]
 [ 2.  2. 16.]]
[[10.  8. 12.]
 [10. 20.  2.]
 [14. 20. 14.]]
[[ 4.  6.  2.]
 [ 6. 12. 12.]
 [ 6. 10. 16.]]
