# REP Server
lappend auto_path ./zeromq
package require zmq 4.0.1

zmq context c1
zmq socket s1 c1 REP
s1 bind "tcp://*:7777"
  #% 

proc handle_req_rep args {
    set request [s1 recv]
    puts "REQ/REP received: $request"
    s1 send "Reply to: $request"
}

s1 readable handle_req_rep

  #% 
vwait forever

s1 destroy
c1 destroy

# REQ Client
lappend auto_path ./zeromq
package require zmq 4.0.1

zmq context c1
zmq socket s1 c1 REQ
s1 connect "tcp://localhost:7777"
  #% 

s1 send "Hello from REQ/REP"
set response [s1 recv]
puts "Received response: $response"
  #% 

s1 destroy
c1 destroy

/// wydruk
wydruk po stronie serwera:
REQ/REP received: Hello from REQ/REP
wydruk po stronie klienta:
Received response: Reply to: Hello from REQ/REP

Opis wzorca REQ/REP: 
Jak sama nazwa wskazuje, REQ/REP działa na zasadzie request - reply, a więc serwer czeka
na request (żądanie) od klienta, po czym odpowiada (reply) klientowi, i tą odpowiedź klient
otrzymuje.


# PUSH Server
lappend auto_path ./zeromq
package require zmq 4.0.1

zmq context c1
zmq socket s1 c1 PUSH
s1 bind "tcp://*:8888"

for {set i 0} {$i < 10} {incr i} {
    set message "Message $i"
    s1 send $message
    puts "PUSH sent: $message"
    after 1000
}

s1 destroy
c1 destroy


# PULL Client
lappend auto_path ./zeromq
package require zmq 4.0.1

zmq context c1
zmq socket s1 c1 PULL
s1 connect "tcp://localhost:8888"

proc handle_pull args {
    set message [s1 recv]
    puts "PULL received: $message"
}

s1 readable handle_pull

vwait forever

s1 destroy
c1 destroy

/// wydruk
wydruk z serwera PUSH:
PUSH sent: Message 0
PUSH sent: Message 1
PUSH sent: Message 2
PUSH sent: Message 3
PUSH sent: Message 4
PUSH sent: Message 5
PUSH sent: Message 6
PUSH sent: Message 7
PUSH sent: Message 8
PUSH sent: Message 9

wydruk z klienta PULL:
PULL received: Message 0
PULL received: Message 1
PULL received: Message 2
PULL received: Message 3
PULL received: Message 4
PULL received: Message 5
PULL received: Message 6
PULL received: Message 7
PULL received: Message 8
PULL received: Message 9

Opis wzorca PULL/PUSH:
W tym wzorcu komunikacyjnym, jedna strona pushuje pewien komunikat, a druga go odbiera,
ale już nie wysyła żadnego potwierdzenia o tym, że go dostała. Komunikacja jest jednokierunkowa: węzeł
PUSH wysyła wiadomości, a węzeł PULL je odbiera.

# PUB Server
lappend auto_path ./zeromq
package require zmq 4.0.1

zmq context c1
zmq socket s1 c1 PUB
s1 bind "tcp://*:9999"

proc publish_messages {} {
    global s1
    set topic "news"
    set message "Breaking news at [clock seconds]"
    s1 send "$topic $message"
    puts "PUB sent: $topic $message"
    after 5000 publish_messages
}

publish_messages

vwait forever

s1 destroy
c1 destroy

# SUB Client
lappend auto_path ./zeromq
package require zmq 4.0.1

zmq context c1
zmq socket s1 c1 SUB
s1 connect "tcp://localhost:9999"
s1 setsockopt SUBSCRIBE "news"

proc handle_sub args {
    set message [s1 recv]
    puts "SUB received: $message"
}

s1 readable handle_sub

vwait forever

s1 destroy
c1 destroy

/// wydruk 
Wydruk serwera:
PUB sent: news Breaking news at 1718207661
PUB sent: news Breaking news at 1718207666
PUB sent: news Breaking news at 1718207671
PUB sent: news Breaking news at 1718207676
PUB sent: news Breaking news at 1718207681
PUB sent: news Breaking news at 1718207686
PUB sent: news Breaking news at 1718207691
PUB sent: news Breaking news at 1718207696
PUB sent: news Breaking news at 1718207701
PUB sent: news Breaking news at 1718207706
PUB sent: news Breaking news at 1718207711
PUB sent: news Breaking news at 1718207716
PUB sent: news Breaking news at 1718207721
PUB sent: news Breaking news at 1718207726
PUB sent: news Breaking news at 1718207731
PUB sent: news Breaking news at 1718207736
PUB sent: news Breaking news at 1718207741
PUB sent: news Breaking news at 1718207746

wydruk klienta:
SUB received: news Breaking news at 1718207661
SUB received: news Breaking news at 1718207666
SUB received: news Breaking news at 1718207671
SUB received: news Breaking news at 1718207676
SUB received: news Breaking news at 1718207681
SUB received: news Breaking news at 1718207686
SUB received: news Breaking news at 1718207691
SUB received: news Breaking news at 1718207696
SUB received: news Breaking news at 1718207701
SUB received: news Breaking news at 1718207706
SUB received: news Breaking news at 1718207711
SUB received: news Breaking news at 1718207716
SUB received: news Breaking news at 1718207721
SUB received: news Breaking news at 1718207726
SUB received: news Breaking news at 1718207731
SUB received: news Breaking news at 1718207736
SUB received: news Breaking news at 1718207741
SUB received: news Breaking news at 1718207746

Opis wzorca PUB/SUB:
W tym wzorcu mamy serwery publikujące (PUB) i klientów, którzy subskrybują dany serwer.
Może być wielu klientów subskrybujących jeden serwer. Kiedy serwer opublikuje jakiś komunikat, to
wszyscy klienci subskrybujący dany 'wątek' dostają ten komunikat.

