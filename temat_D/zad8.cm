binarysem sem = 1;

const int rozmiar_buf = 1000; // "nieskonczony" bufor
int buf[rozmiar_buf];
int buf_czyt = 0;
int buf_pisz = 0;

atomic void Pokaz(string S)
{
    cout << which_proc() << ": " << S << endl;
}

void Produkuj()
{
    int el;
    string[50] str;
    el = random(1000);

    sprintf(str, "produkuje %d; buf_pisz=%d, buf_czyt=%d", el, buf_pisz, buf_czyt);
    Pokaz(str);

    buf[buf_pisz] = el;
    buf_pisz++;
    if (buf_pisz >= rozmiar_buf)
    {
        exit(1);
    }
}

void Konsumuj()
{
    int el;
    string[50] str;
    el = buf[buf_czyt];

    sprintf(str, "konsumuje %d; buf_pisz=%d, buf_czyt=%d", el, buf_pisz, buf_czyt);
    Pokaz(str);

    buf_czyt++;
    if (buf_czyt >= rozmiar_buf)
        exit(1);
}

void Producent()
{
    int atrapa;
    while (1)
    {

        wait(sem);
        Produkuj();
        signal(sem);

        atrapa = 321;
        atrapa = 321;
        atrapa = 321;
        atrapa = 123;
        atrapa = 321;
        atrapa = 321;
        atrapa = 321;
        atrapa = 123;
        atrapa = 321;
        atrapa = 321;
        atrapa = 321;
        atrapa = 321;
        atrapa = 321;
        atrapa = 123;
        atrapa = 321;
    }
}

void Konsument()
{
    int atrapa;
    while (1)
    {
        wait(sem);
        Konsumuj();
        signal(sem);
        atrapa = 123;
        atrapa = 321;
        atrapa = 123;
        atrapa = 321;
        atrapa = 123;
        atrapa = 321;
        atrapa = 123;
        atrapa = 321;
        atrapa = 321;
    }
}

main()
{
    cobegin
    {
        Konsument();
        Producent();
    }
}
